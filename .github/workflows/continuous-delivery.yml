name: "Deploy to server"

on:
  push:
    tags: ["v1.**"]

jobs:
  deploy-to-release-server:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_LOGIN_USERNAME }}
          password: ${{ secrets.DOCKER_LOGIN_TOKEN }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set release version.
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#      - name: Test
#        run: |
#          echo $RELEASE_VERSION
#          echo ${{ env.RELEASE_VERSION }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./.docker/hub/go/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_LOGIN_USERNAME }}/${{ github.event.repository.name }}:latest
          build-args: TAG=${{ env.RELEASE_VERSION }}

      - name: Login to release server and launch container.
        uses: appleboy/ssh-action@master
        env:
          DOCKER_LOGIN_USERNAME: ${{ secrets.DOCKER_LOGIN_USERNAME }}
          DOCKER_LOGIN_TOKEN: ${{ secrets.DOCKER_LOGIN_TOKEN }}
          AUCTION_API_REPO: ${{ github.event.repository.name }}
          APP_ENV: ${{ secrets.APP_ENV }}
          APP_PORT: ${{ secrets.APP_PORT }}
          DB_DSN: ${{ secrets.DB_DSN }}
          GIN_MODE: ${{ secrets.GIN_MODE }}
          JWT_HS256_KEY: ${{ secrets.JWT_HS256_KEY }}
          MAX_UPLOAD_SIZE: ${{ secrets.MAX_UPLOAD_SIZE }}
          UPLOADS_VOLUME: ${{ secrets.UPLOADS_VOLUME }}
          UPLOADS_VOLUME_NAME: ${{ secrets.UPLOADS_VOLUME_NAME }}
        with:
          host: ${{ secrets.DEPLOY_HOST_PROD }}
          username: ${{ secrets.DEPLOY_HOST_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_HOST_SSH_KEY }}
          port: ${{ secrets.DEPLOY_HOST_SSH_PORT }}
          script: |
            sudo apt-get update
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo groupadd docker
            sudo usermod -aG docker $USER
            newgrp docker
            sudo systemctl enable docker.service
            sudo systemctl enable containerd.service
            docker rm -f auction-api-app
            docker rmi -f ${{ env.DOCKER_LOGIN_USERNAME }}/${{ env.AUCTION_API_REPO }}
            docker login --username ${{ env.DOCKER_LOGIN_USERNAME }} --password ${{ env.DOCKER_LOGIN_TOKEN }}
            docker pull ${{ env.DOCKER_LOGIN_USERNAME }}/${{ env.AUCTION_API_REPO }}:latest
            docker logout
            docker rm -f auction-api-app
            docker volume create ${{ env.UPLOADS_VOLUME_NAME }}
            docker run -d -p 80:8081 \
            -e APP_ENV=${{ env.APP_ENV }} \
            -e DB_DSN=${{ env.DB_DSN }} \
            -e PORT=${{ env.APP_PORT }} \
            -e MAX_UPLOAD_SIZE=${{ env.MAX_UPLOAD_SIZE }} \
            -e GIN_MODE=${{ env.GIN_MODE }} \
            -e JWT_HS256_KEY=${{ env.JWT_HS256_KEY }} \
            -e GIN_MODE=${{ env.GIN_MODE }} \
            -v ${{ env.UPLOADS_VOLUME_NAME }}:${{ env.UPLOADS_VOLUME }} \
            --name auction-api-app ${{ env.DOCKER_LOGIN_USERNAME }}/${{ env.AUCTION_API_REPO }}:latest 
